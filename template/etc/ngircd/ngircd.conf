# Retroska sample config
#
# Comments are started with "#" or ";".
#
# Use "ngircd --configtest" (see manual page ngircd(8)) to validate that the
# server interprets the configuration file as expected!
#
# Please see ngircd.conf(5) for a complete list of configuration options
# and their descriptions.
#
# The original can be found at:
# /usr/share/doc/ngircd/sample-ngircd.conf.gz

[Global]
	# Text file which contains the ngIRCd help text. This file is required
	# to display help texts when using the "HELP <cmd>" command.
	;HelpFile = /usr/share/doc/ngircd/Commands.txt

	# Text file with the "message of the day" (MOTD). This message will
	# be shown to all users connecting to the server:
	MotdFile = /mnt/conf/banner.txt

	# The name of the IRC network to which this server belongs. This name
	# is optional, should only contain ASCII characters, and can't contain
	# spaces. It is only used to inform clients. The default is empty,
	# so no network name is announced to clients.
	Network = Retroska

	# This tells ngIRCd to write its current process ID to a file.
	# Note that the pidfile is written AFTER chroot and switching the
	# user ID, e.g. the directory the pidfile resides in must be
	# writable by the ngIRCd user and exist in the chroot directory.
	# Keep this setting in sync with PIDFILE in /etc/init.d/ngircd
	PidFile = /var/run/ngircd/ngircd.pid

	# Group ID under which the ngIRCd should run; you can use the name
	# of the group or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges!
	# Keep this setting in sync with DAEMONUSER in the init script and/or
	# the Group= setting in service file.
	ServerGID = irc

	# User ID under which the server should run; you can use the name
	# of the user or the numerical ID. ATTENTION: For this to work the
	# server must have been started with root privileges! In addition,
	# the configuration and MOTD files must be readable by this user,
	# otherwise RESTART and REHASH won't work!
	# Keep this setting in sync with DAEMONUSER in the init script and/or
	# the User= setting in service file.
	ServerUID = irc

[Limits]
	# Define some limits and timeouts for this ngIRCd instance. Default
	# values should be safe, but it is wise to double-check :-)

	# The server tries every <ConnectRetry> seconds to establish a link
	# to not yet (or no longer) connected servers.
	ConnectRetry = 60

	# Number of seconds after which the whole daemon should shutdown when
	# no connections are left active after handling at least one client
	# (0: never, which is the default).
	# This can be useful for testing or when ngIRCd is started using
	# "socket activation" with systemd(8), for example.
	;IdleTimeout = 0

	# Maximum number of simultaneous in- and outbound connections the
	# server is allowed to accept (0: unlimited):
	MaxConnections = 500

	# Maximum number of simultaneous connections from a single IP address
	# the server will accept (0: unlimited):
	MaxConnectionsIP = 10

	# Maximum number of channels a user can be member of (0: no limit):
	MaxJoins = 10

	# Maximum length of an user nickname (Default: 9, as in RFC 2812).
	# Please note that all servers in an IRC network MUST use the same
	# maximum nickname length!
	;MaxNickLength = 9

	# Maximum penalty time increase in seconds, per penalty event. Set to -1
	# for no limit (the default), 0 to disable penalties altogether. The
	# daemon doesn't use penalty increases higher than 2 seconds during
	# normal operation, so values greater than 1 rarely make sense.
	;MaxPenaltyTime = -1

	# Maximum number of channels returned in response to a /list
	# command (0: unlimited):
	;MaxListSize = 100

	# After <PingTimeout> seconds of inactivity the server will send a
	# PING to the peer to test whether it is alive or not.
	PingTimeout = 120

	# If a client fails to answer a PING with a PONG within <PongTimeout>
	# seconds, it will be disconnected by the server.
	PongTimeout = 20

[Options]
	# Optional features and configuration options to further tweak the
	# behavior of ngIRCd. If you want to get started quickly, you most
	# probably don't have to make changes here -- they are all optional.

	# Default user mode(s) to set on new local clients. Please note that
	# only modes can be set that the client could set using regular MODE
	# commands, you can't set "a" (away) for example! Default: none.
	;DefaultUserModes = i

	# Do DNS lookups when a client connects to the server.
	;DNS = yes

	# Do IDENT lookups if ngIRCd has been compiled with support for it.
	# Users identified using IDENT are registered without the "~" character
	# prepended to their user name.
	;Ident = yes

	# Directory containing configuration snippets (*.conf), that should
	# be read in after parsing this configuration file.
	IncludeDir = /etc/ngircd/conf.d

	# Should IRC Operators be allowed to use the MODE command even if
	# they are not(!) channel-operators?
	OperCanUseMode = yes

	# Should IRC Operators get AutoOp (+o) in persistent (+P) channels?
	;OperChanPAutoOp = yes

	# Mask IRC Operator mode requests as if they were coming from the
	# server? (This is a compatibility hack for ircd-irc2 servers)
	;OperServerMode = no

	# Use PAM if ngIRCd has been compiled with support for it.
	# Users identified using PAM are registered without the "~" character
	# prepended to their user name.
	PAM = no

	# Let ngIRCd send an "authentication PING" when a new client connects,
	# and register this client only after receiving the corresponding
	# "PONG" reply.
	;RequireAuthPing = no

	# Silently drop all incoming CTCP requests.
	;ScrubCTCP = no

	# Syslog "facility" to which ngIRCd should send log messages.
	# Possible values are system dependent, but most probably auth, daemon,
	# user and local1 through local7 are possible values; see syslog(3).
	# Default is "local5" for historical reasons, you probably want to
	# change this to "daemon", for example.
	SyslogFacility = local1

[Server]
	# Other servers are configured in [Server] sections. If you
	# configure a port for the connection, then this ngircd tries to
	# connect to the other server on the given port; if not it waits
	# for the other server to connect.
	# There may be more than one server block, one for each server.
	#
	# Server Groups:
	# The ngIRCd allows "server groups": You can assign an "ID" to every
	# server with which you want this ngIRCd to link. If a server of a
	# group won't answer, the ngIRCd tries to connect to the next server
	# in the given group. But the ngircd never tries to connect to two
	# servers with the same group ID.

	# IRC name of the remote server, must match the "Name" variable in
	# the [Global] section of the other server (when using ngIRCd).
	;Name = irc2.example.net

	# Internet host name or IP address of the peer (only required when
	# this server should establish the connection).
	;Host = connect-to-host.example.net

	# IP address to use as _source_ address for the connection. if
	# unspecified, ngircd will let the operating system pick an address.
	;Bind = 10.0.0.1

	# Port of the server to which the ngIRCd should connect. If you
	# assign no port the ngIRCd waits for incoming connections.
	;Port = 6667

	# Own password for the connection. This password has to be configured
	# as "PeerPassword" on the other server.
	;MyPassword = MySecret

	# Foreign password for this connection. This password has to be
	# configured as "MyPassword" on the other server.
	;PeerPassword = PeerSecret

	# Group of this server (optional)
	;Group = 123

	# Set the "Passive" option to "yes" if you don't want this ngIRCd to
	# connect to the configured peer (same as leaving the "Port" variable
	# empty). The advantage of this option is that you can actually
	# configure a port an use the IRC command CONNECT more easily to
	# manually connect this specific server later.
	;Passive = no

	# Define a (case insensitive) list of masks matching nicknames that
	# should be treated as IRC services when introduced via this remote
	# server, separated by commas (",").
	# REGULAR SERVERS DON'T NEED this parameter, so leave it empty
	# (which is the default).
	# When you are connecting IRC services which mask as a IRC server
	# and which use "virtual users" to communicate with, for example
	# "NickServ" and "ChanServ", you should set this parameter to
	# something like "*Serv" or "NickServ,ChanServ,XyzServ".
	;ServiceMask = *Serv,Global
